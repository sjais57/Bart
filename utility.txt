# Add these Pydantic models
class StopSessionRequest(BaseModel):
    session_ids: List[str]
    force_quit: bool = False
    suspend_session: bool = False

class StopSessionResponse(BaseModel):
    success: bool
    message: str
    stopped_sessions: List[str] = []
    error: Optional[str] = None

# Add this configuration constant
STOP_SESSION_API = "/api/stop_session"

# Add this helper function
async def stop_session_api(token: str, session_ids: List[str], force_quit: bool = False, suspend_session: bool = False) -> Dict[str, Any]:
    """Stop/kill sessions using the provided API"""
    payload = {
        "method": "stop_session",
        "kwparams": {
            "session_ids": session_ids,
            "force_quit": force_quit,
            "suspend_session": suspend_session
        }
    }
    
    return await make_api_request(STOP_SESSION_API, payload, token)

# Add this endpoint
@app.post("/stop-session", response_model=StopSessionResponse)
async def stop_session_endpoint(
    request: StopSessionRequest,
    x_user_id: Optional[str] = Header(None, description="User ID to look up token from tokens.json")
):
    """
    Stop/kill one or more sessions
    
    You can either:
    1. Provide an X-User-ID header to look up the token from tokens.json
    2. If no header provided, it will use the current system user
    """
    # Get user and token (centralized logic)
    user_id, token = get_user_token(x_user_id)

    # Stop the sessions
    try:
        response_data = await stop_session_api(
            token=token,
            session_ids=request.session_ids,
            force_quit=request.force_quit,
            suspend_session=request.suspend_session
        )

        if response_data and "result" in response_data:
            return StopSessionResponse(
                success=True,
                message=f"Successfully stopped {len(request.session_ids)} sessions",
                stopped_sessions=request.session_ids
            )
        else:
            return StopSessionResponse(
                success=False,
                message="Unexpected response format from external API",
                error=str(response_data)
            )
            
    except HTTPException:
        raise
    except Exception as e:
        return StopSessionResponse(
            success=False,
            message="Failed to stop sessions",
            error=str(e)
        )
