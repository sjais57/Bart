@app.post("/stop-session", response_model=StopSessionResponse)
async def stop_session_endpoint(
    request: StopSessionRequest,
    x_user_id: str = Header(..., description="User ID to look up token from tokens.json")
):
    """Stop/kill one or more sessions"""
    user_id, token = get_user_token(x_user_id)

    try:
        # Convert session_ids list to comma-separated string
        session_ids_str = ",".join(request.session_ids)
        
        # Direct API call
        url = BASE_URL + STOP_SESSION_API
        payload = json.dumps({
            "method": "stop_session",
            "kwparams": {
                "session_ids": session_ids_str,
                "force_quit": request.force_quit,
                "suspend_session": request.suspend_session
            }
        })
        
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {token}'
        }

        print(f"Request payload: {payload}")

        response = requests.request("POST", url, headers=headers, data=payload, verify=False)
        
        # Debug output
        print(f"HTTP Status: {response.status_code}")
        print(f"Response content: {response.text[:500]}")  # First 500 chars

        # Check if response is JSON
        response_data = None
        if response.text.strip():  # If response is not empty
            try:
                response_data = response.json()
                print(f"JSON response: {json.dumps(response_data, indent=2)}")
            except json.JSONDecodeError:
                # Not JSON, but might still be successful
                print("Response is not JSON format")
        
        # Check for success based on HTTP status code
        if response.status_code == 200:
            # If we get HTTP 200, consider it successful regardless of response format
            return StopSessionResponse(
                success=True,
                message=f"Successfully stopped {len(request.session_ids)} sessions",
                stopped_sessions=request.session_ids
            )
        else:
            return StopSessionResponse(
                success=False,
                message=f"API returned HTTP {response.status_code}",
                error=f"Response: {response.text[:200]}"
            )
            
    except requests.exceptions.RequestException as e:
        print(f"Request error: {e}")
        return StopSessionResponse(
            success=False,
            message="Failed to connect to external API",
            error=str(e)
        )
    except Exception as e:
        print(f"Unexpected error: {e}")
        return StopSessionResponse(
            success=False,
            message="Failed to stop sessions",
            error=str(e)
        )
