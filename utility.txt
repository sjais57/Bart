diff --git a/app_jwt.py b/app_jwt.py
--- a/app_jwt.py
+++ b/app_jwt.py
@@
-import os
+import os
+import re
 from datetime import timedelta, datetime
 from flask import Flask, jsonify, request, make_response, render_template, send_from_directory
@@
 app.register_blueprint(swaggerui_blueprint, url_prefix=SWAGGER_URL)
@@
 app.config["JWT_SECRET_KEY"] = os.getenv("JWT_SECRET_KEY", "dev-secret-key")
 
+def _extract_group_cns(groups):
+    """
+    Normalize LDAP groups to a flat list of CNs (lowercased).
+    Accepts:
+      - list of DNs: 'cn=Admins,ou=groups,dc=ex,dc=com'
+      - list of dicts: {'cn': 'Admins', ...}
+      - plain names: 'Admins'
+    """
+    result = []
+    for g in (groups or []):
+        if isinstance(g, dict):
+            cn = g.get('cn') or g.get('name') or g.get('uid') or ''
+            if cn:
+                result.append(cn.lower())
+        elif isinstance(g, str):
+            m = re.search(r'cn=([^,]+)', g, flags=re.I)
+            result.append((m.group(1) if m else g).lower())
+    # de-dup while preserving order
+    seen, ordered = set(), []
+    for n in result:
+        if n not in seen:
+            seen.add(n)
+            ordered.append(n)
+    return ordered
+
@@
 def login():
@@
-    # Create user context for dynamic claims processing
-    user_context = {
-        "user_id": username,
-        "email": user_data.get("email", ""),
-        "groups": user_data.get("groups", []),
-        "roles": user_data.get("roles", []),
-        "team_id": get_team_id_from_user(username, user_data)
-    }
+    # Normalize groups to CNs for consistent matching everywhere
+    raw_groups = user_data.get("groups", [])
+    normalized_groups = _extract_group_cns(raw_groups)
+
+    # Create user context for dynamic claims processing
+    user_context = {
+        "user_id": username,
+        "email": user_data.get("email", ""),
+        "groups": normalized_groups,
+        "roles": user_data.get("roles", []),
+        "team_id": get_team_id_from_user(username, dict(user_data, groups=normalized_groups))
+    }
@@
-        user_context = {
+        user_context = {
             "user_id": username,
-            "team_id": get_team_id_from_user(username, user_data),
-            "groups": user_data.get("groups", []),  # Ensure groups is included for dynamic claims
+            "team_id": get_team_id_from_user(username, dict(user_data, groups=normalized_groups)),
+            "groups": normalized_groups,  # pass CNs to dynamic claims
             "api_key_id": api_key  # Use the API key itself as an ID if needed
         }
@@
-    # Merge user data with additional claims
-    claims = {**user_data, **api_key_claims}
+    # Merge user data with additional claims
+    claims = {**user_data, **api_key_claims}
+    # Ensure the 'groups' claim contains CNs only (for policy matching)
+    claims["groups"] = normalized_groups
+    # (optional) include raw groups for debugging/traceability
+    claims["groups_raw"] = raw_groups
@@
 def get_team_id_from_user(username, user_data):
@@
-    # Simple mapping based on groups
-    groups = user_data.get("groups", [])
+    # Simple mapping based on groups (already normalized to CNs where possible)
+    groups = _extract_group_cns(user_data.get("groups", []))
