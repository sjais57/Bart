async def stop_session_api(token: str, session_ids: List[str], force_quit: bool = False, suspend_session: bool = False) -> Dict[str, Any]:
    """Stop/kill sessions using the provided API"""
    # Convert session_ids list to comma-separated string for the external API
    session_ids_str = ",".join(session_ids)
    
    payload = {
        "method": "stop_session",
        "kwparams": {
            "session_ids": session_ids_str,  # Send as string
            "force_quit": force_quit,
            "suspend_session": suspend_session
        }
    }
    
    response_data = await make_api_request(STOP_SESSION_API, payload, token)
    
    # Debug logging to see actual response structure
    print(f"Stop session API response: {response_data}")
    
    return response_data

@app.post("/stop-session", response_model=StopSessionResponse)
async def stop_session_endpoint(
    request: StopSessionRequest,
    x_user_id: str = Header(..., description="User ID to look up token from tokens.json")
):
    """Stop/kill one or more sessions"""
    user_id, token = get_user_token(x_user_id)

    try:
        response_data = await stop_session_api(
            token=token,
            session_ids=request.session_ids,
            force_quit=request.force_quit,
            suspend_session=request.suspend_session
        )

        # For stop session, we primarily care about HTTP status code
        # The external API might return empty or non-JSON response on success
        # So we consider HTTP 200 as success regardless of response content
        
        # If we got this far without exception, the request was successful
        # (make_api_request raises exceptions for non-2xx status codes)
        return StopSessionResponse(
            success=True,
            message=f"Successfully stopped {len(request.session_ids)} sessions",
            stopped_sessions=request.session_ids
        )
            
    except HTTPException as e:
        # Re-raise HTTP exceptions to maintain proper status codes
        raise e
    except requests.exceptions.RequestException as e:
        print(f"Request error: {e}")
        return StopSessionResponse(
            success=False,
            message="Failed to connect to external API",
            error=str(e)
        )
    except Exception as e:
        print(f"Unexpected error: {e}")
        return StopSessionResponse(
            success=False,
            message="Failed to stop sessions",
            error=str(e)
        )
