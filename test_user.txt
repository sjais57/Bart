import requests
import json
import getpass
import os

def get_token_from_json(user_id, filename="tokens.json"):
    """Read token from JSON file based on user ID"""
    try:
        # Get the directory where the script is located
        script_dir = os.path.dirname(os.path.abspath(__file__))
        token_file_path = os.path.join(script_dir, filename)
        
        with open(token_file_path, 'r') as file:
            tokens = json.load(file)
            return tokens.get(user_id)
    except FileNotFoundError:
        print(f"Token file '{filename}' not found in the same directory as this script")
        return None
    except json.JSONDecodeError:
        print(f"Error parsing JSON file '{filename}'")
        return None

# Automatically get the current system username
current_user = getpass.getuser()
print(f"Detected user: {current_user}")

# Configuration
base_url = "https://url"
launch_api = "/api/launch_session"

# Get token from JSON file based on current user
token = get_token_from_json(current_user)
if not token:
    print(f"Token not found for user: {current_user}")
    print("Available users in tokens.json:")
    try:
        # Get the directory where the script is located
        script_dir = os.path.dirname(os.path.abspath(__file__))
        token_file_path = os.path.join(script_dir, "tokens.json")
        
        with open(token_file_path, 'r') as file:
            tokens = json.load(file)
            for user in tokens.keys():
                print(f"  - {user}")
    except FileNotFoundError:
        print("  tokens.json file not found in the script directory")
    except json.JSONDecodeError:
        print("  Error reading tokens.json file")
    except Exception as e:
        print(f"  Unexpected error: {e}")
    exit(1)

payload = json.dumps({
    "method": "launch_session",
    "kwparams": {
        "workbench": "JupyterLab",
        "name": "My JupyterLab Session-1",
        "launch_parameters": {
            "name": f"{current_user}-JL3",
            "cluster": "Local",
            "placement_constraints": [],
            "resource_limits": [],
            "queues": []
        }
    }
})

headers = {
    'Content-Type': 'application/json',
    'Authorization': f'Bearer {token}'
}

response = requests.request("POST", base_url + launch_api, headers=headers, data=payload, verify=False)

data_dict = json.loads(response.text)
full_url = base_url + data_dict["result"]["url"]
print(full_url)
