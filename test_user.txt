1) Edit swagger_config.py (make “servers” dynamic)

-from apispec import APISpec
-from apispec.ext.marshmallow import MarshmallowPlugin
-from flask import Flask, jsonify
+from apispec import APISpec
+from apispec.ext.marshmallow import MarshmallowPlugin
+from flask import Flask, jsonify, request
@@
-    servers=[
-        {"url": "http://localhost:5000", "description": "Development server"}
-    ],
@@
-def get_swagger_dict():
-    """Return the Swagger specification as a dictionary."""
-    return spec.to_dict()
+def get_swagger_dict():
+    """Return the Swagger specification as a dictionary."""
+    data = spec.to_dict()
+    # Use the actual origin + mount prefix so Swagger “Try it out” hits the right place
+    base = request.url_root.rstrip("/")
+    data["servers"] = [{"url": base, "description": "Current server"}]
+    return data



2) Edit app_jwt.py (proxy safety + default algo)

 app = Flask(__name__, template_folder=str(templates_dir))
+from werkzeug.middleware.proxy_fix import ProxyFix
+app.wsgi_app = ProxyFix(app.wsgi_app, x_for=1, x_proto=1, x_host=1, x_prefix=1)


Add a safe default for the algorithm (your /decode and debug endpoints read it):
 app.config["JWT_SECRET_KEY"] = os.getenv("JWT_SECRET_KEY", "dev-secret-key")
 app.config["JWT_ACCESS_TOKEN_EXPIRES"] = timedelta(hours=1)
 app.config["JWT_REFRESH_TOKEN_EXPIRES"] = timedelta(days=30)
+app.config.setdefault("JWT_ALGORITHM", "HS256")


Option B — FastAPI host + mount your Flask app (recommended if you also want FastAPI):

Create hybrid_app.py:
# hybrid_app.py
from fastapi import FastAPI
from starlette.middleware.wsgi import WSGIMiddleware
from app_jwt import app as flask_app  # your existing Flask app

api = FastAPI(title="Hybrid Host")

@api.get("/fastapi/health")
def health():
    return {"ok": True}

# Flask mounted at /legacy → its docs become /legacy/dspai-docs
api.mount("/legacy", WSGIMiddleware(flask_app))
